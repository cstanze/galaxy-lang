import { GalaxyTokenizer } from './tokenizer'

interface GalaxyStar {
  name: string,
  size: string,
  central: boolean
}

interface GalaxyPlanetOrbit {
  rank: number,
  speed: string
}

interface GalaxyPlanet {
  name: string,
  size: string,
  type: string,
  orbit: GalaxyPlanetOrbit
}

interface GalaxyType {
  galaxy_name: string,
  stars: Array<GalaxyStar>,
  planets: Array<GalaxyPlanet>
}

export class Galaxy {
  static parse(contents: string, debug = false): GalaxyType {
    let tokenizer = new GalaxyTokenizer(contents, debug)
    return tokenizer.tokenMap as GalaxyType
  }

  static stringify(galaxy: GalaxyType, markers = false): string {
    galaxy = Galaxy.castToGalaxy(galaxy) // force coercion
    let galaxyContents = `%Autogenerated Galaxy: "${galaxy.galaxy_name}"%\n\n`
    galaxyContents += `galaxy_name: "${galaxy.galaxy_name}"\n\n`
    
    if(markers)
      galaxyContents += `%MARK: Star Section%`
    galaxyContents += `stars:\n`
    for(const star of galaxy.stars) {
      galaxyContents += `\t$${galaxy.stars.indexOf(star)}:\n`
      galaxyContents += `\t\tname: "${star.name}"\n`
      galaxyContents += `\t\tsize: "${star.size}"\n`
      galaxyContents += `\t\tcentral: ${star.central}\n`
    }

    if(markers)
      galaxyContents += `%MARK: Planet Section%`
    galaxyContents += `\nplanets:\n`
    for(const planet of galaxy.planets) {
      galaxyContents += `\t$${galaxy.planets.indexOf(planet)}:\n`
      galaxyContents += `\t\tname: "${planet.name}"\n`
      galaxyContents += `\t\tsize: "${planet.size}"\n`
      galaxyContents += `\t\ttype: "${planet.type}"\n`
      galaxyContents += `\t\t$orbit:\n`
      galaxyContents += `\t\t\trank: ${planet.orbit.rank}\n`
      galaxyContents += `\t\t\tspeed: "${planet.orbit.speed}"\n`
    }

    return galaxyContents
  }

  static castToGalaxy(galaxy: any): GalaxyType {
    return {
      galaxy_name: "",
      stars: [],
      planets: [],
      ...galaxy
    }
  }
}

export default Galaxy
